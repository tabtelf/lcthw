#+STARTUP: showall hidestars
#+TITLE: lcthw


* This Book Is Not Really About C
  本书不是教你 C 编程的. 你将会学习用 C 写程序, 但更重要的是学习严格的
  防御性程序设计(rigorous defensive programming).尤其是如果你是那种学
  习了很多现代程序语言的人, 能为你解决许多问题. 通过阅读本书并遵循练习,
  你将学习如何创建能够防御恶意活动和缺陷的软件.

  我用 C 有一个很特别的原因: C 是脆弱的. 它充满了在20世纪70年代有意义
  的设计选择, 但现在却毫无意义.几乎所有攻击 C 的安全缺陷都要归咎于它从
  无限制,任意使用指针到严重中断的以 NUL 结尾的字符串. 我相信 C 语言是
  如此的脆弱(broken),以至于在广泛使用的情况下, 它是最难安全地编写的语
  言.我认为汇编(Assembly) 比 C 更容易安全地编写. 说实话, 你会发现我很
  诚实, 我不认为任何人应该写新的 C 代码.
  
  如果是这样的话, 我为什么要教你 C? 因为我想让你成为一个更好,更强的程
  序员, 如果你想变得更好的话, 为什么 C 是一门优秀的语言, 有两个原因.
  首先, C 几乎没有任何现代安全功能, 这意味着你必须更加警惕, 更加了解发
  生的事情. 如果你可以编写安全,可靠的 C 代码, 那么你可以用任何编程语言
  编写安全可靠的代码. 从现在起, 你所学的技术将转化为你使用的每一种语言.
  其次, 学习 C 可以让你直接访问大量旧代码, 并教会你大量派生语言的基本
  语法. 一旦你学习 C, 你可以更容易地学习C++, Java, Objective-C 和
  JavaScript, 甚至其他语言变得更容易学习.
  
  我不想告诉你这些把你吓跑, 因为我计划把这本书变得非常有趣, 简单和
  devious. 我会给你一些其他编程语言可能做不到的项目, 让你学习 C 变得有
  趣. 我将通过使用我已经证明的练习模式使这本书变得简单, 这些练习让你慢
  慢地进行 C 语言编程和培养你的技能. 我会教你如何破会和保护你的代码,
  这样你就明白为什么这些问题很重要了, 这会让其变得复杂. 你将学习如何导
  致堆栈溢出, 非法内存访问和其他困扰 C 程序的常见缺陷, 以便了解你所面
  临的问题.

  像我的所有书一样, 读完这本书是很有挑战性的, 但当你读完后, 你会成为一
  个更好, 更自信的程序员.
** The Undefined behaviorists
   当你读完这本书的时候, 你将能够调试, 阅读和修复你遇到的几乎所有的 C
   程序, 然后根据需要编写新的,可靠的 C 代码. 不过, 我并不是真的要教你
   官方的 C 语言, 你会学并很好的运用它, 但官方的 C 不是很安全. 绝大多
   数的 C 程序员都不写可靠的代码, 这是因为所谓的未定义行为(UB). UB 是
   美国国家标准协会 (ANSI) C标准的一部分, 它列出了C编译器可以忽略你所
   写内容的所有方法. 实际上, 标准中有一部分规定, 如果编写这样的代码,
   那么很难预料,编译器也不必一致. UB发生在C程序读取字符串末尾时, 这是C
   中非常常见的编程错误. C将字符串定义为以NUL字节或0字节结尾的内存块
   (以简化定义). 由于许多字符串来自程序外部, 所以C程序通常会收到一个没
   有这个NUL字节的字符串. 当它这样做时, C程序试图读取超过这个字符串的
   结尾, 并进入计算机的内存, 导致程序崩溃. 在C之后开发的所有其他语言都
   试图阻止这种情况, 但不是C. C很少阻止UB, 所以每个C程序员似乎认为这意
   味着他们不必处理它. 他们编写的代码充满了潜在的NUL字节溢出, 当你向这
   些程序员指出时, 他们说, "这是UB, 我不必阻止它." 这种对C大量UB的依赖
   是大多数C代码如此不安全的原因.

   我编写C代码试图通过编写不触发UB的代码来避免UB, 或者编写试图阻止UB的
   代码. 这是一项不可能完成的任务, 因为在你的C代码中, UB太多了, 以至于
   它变成了一个由相互连接的陷阱组成的棘手的结. 在你阅读本书时, 我将指
   出你可以触发UB的方法, 如果可以的话避免它, 如果可能的话, 如何在其他
   人的代码中触发它. 但是, 你应该记住, 完全避免UB的随机性几乎是不可能
   的, 你只需要尽最大努力.
** C Is a Pretty and Ugly Language
   
   不过, 如果你想成为一名更好的程序员, 学习C也是一个不错的选择的原因之
   一. 如果你能像我教你的那样写出好的可靠的C代码, 那么你就可以在任何语
   言中生存下来. 从积极的方面来说, C在很多方面都是一种非常优雅的语言.
   它的语法实际上非常小, 因为它具有强大的功能. 在过去的45年左右的时间
   里, 有很多其他语言复制了它的语法, 这是有原因的. C还提供了大量使用非
   常少的技术. 当你学习完C后, 你会欣赏到一种非常优雅,美丽但有时也有点
   丑陋的东西. C是老的, 所以它就像一座美丽的纪念碑, 从20英尺远的地方看
   起来会很奇妙, 但是当你靠近它时, 你会看到它所有的裂缝和瑕疵. 

   正因为如此, 我将教你C的最新版本, 我可以使用最新的编译器. 它是C的一
   个实用, 简单, 完整的子集, 可以很好地工作, 可以在任何地方工作, 并且
   可以避免许多陷阱. 这是我用来完成实际工作的C, 而不是那些铁杆粉丝们尝
   试过却没能使用的C的百科全书版本.

   我知道我使用的C是可靠的, 因为我花了20年时间编写了干净, 可靠的C代码,
   它为大型操作提供了动力, 而且完全没有任何故障. 我的C代码可能已经处理
   了数万亿笔交易, 因为它为Twitter和airbnb等公司的运营提供了动力. 它很
   少失败或受到安全攻击. 在我的代码为Ruby on Rails Web世界提供支持的许
   多年中, 它运行得很好, 甚至可以防止安全攻击, 而其他Web服务器则反复遭
   受最简单的攻击.

   我编写C代码的风格是可靠的, 但更重要的是, 我在编写C时的心态是每个程
   序员都应该具备的. 我使用C和任何编程方法, 以尽我所能防止错误的想法,
   并假设没有任何东西可以正常工作. 其他程序员, 即使是被认为是优秀的C
   程序员, 也倾向于编写代码, 并假设一切都是可以工作. 但是依靠 UB 或者
   操作系统来保存它们, 这两者都不能作为解决方案工作. 记住, 如果人们试
   图告诉你, 我在这本书中教的代码不是"真正的C". 如果他们没有和我一样的
   记录, 也许你可以用我教你的东西告诉他们, 为什么他们的代码不太安全.

   这是否意味着我的代码是完美? 不, 完全不是. 这是C代码. 写完美的C代码
   是不可能的, 事实上, 用任何语言写完美的代码都是不可能的. 这是编程乐
   趣和挫折的一半. 我可以把别人的代码撕成碎片, 有人可以把我的代码撕成
   碎片. 所有代码都有缺陷, 但不同的是, 我尝试假定我的代码总是有缺陷的,
   然后防止缺陷. 如果你读完本书, 我给你的礼物是教你防御性编程思维方式,
   这种思维方式已经为我服务了20年, 并且帮助我制作高质量, 健壮的软件.
** What You Will Learn

   这本书的目的是让你在C语言中足够强大, 你可以用它编写自己的软件, 或者
   修改别人的C代码. 在本书之后, 你应该读 Brian Kernighan 和 Dennis
   Ritchie 的 The C Programming Language, Second Edition(Prentice
   Hall, 1988), 本书是C语言的创造者写的, 也叫 K&R C. 我要教你的是:

   - C的基本语法和编写习惯
   - 编译, make file 和链接
   - 寻找和预防 bug
   - 防御性编程实践
   - 使C代码崩溃
   - 编写基本的 UNIX 系统软件

   到最后一个练习, 你将有足够的工具来处理基本系统软件, 库和其他较小的
   项目.
** How to Read This Book
   
   * 首先观看讲课视频, 除非练习中另有说明
   * 手动输入所有代码. 不要复制粘贴.
   * 正确地输入所有代码, 也包括注释.
   * 运行代码并保证产生相同的输出.
   * 如果出现bug则修正它.
   * 做附加题时, 如果你做不出某题, 马上跳过.
   * 在寻求帮助之前首先尝试自己解决.

** 核心竞争力

*** Reading and Writing

*** 专注细节

*** 定位差异

*** 规划和调试

* Exercise 0. The Setup
* Exercise 1. Dust Off That Compiler

** Breaking It Down

** What You Should See

** How to Break It

** Extra Credit

* Exercise 2. Using Makefiles to Build

** Using Make
** What You Should See
** How to Break it
** Extra Credit
* Exercise 3. Formatted Printing
  Keep that Makefile around since it'll help you spot errors, and
  we'll be adding to it when we need to automate more things. Many
  programming languages use the C way of formatting output, so let's
  try it:
** What You Should See
